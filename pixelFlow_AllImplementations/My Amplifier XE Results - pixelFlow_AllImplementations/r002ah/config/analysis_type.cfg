<?xml version="1.0" encoding="UTF-8"?>
<bag xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean" xmlns:double="http://www.intel.com/2001/XMLSchema#double" xmlns:exsl="http://exslt.org/common" xmlns:int="http://www.w3.org/2001/XMLSchema#int" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
 <internal>
  <name>%AdvancedHotspotsAtypeName</name>
  <shortName>%AdvancedHotspotsAtypeShortName</shortName>
  <description>%AdvancedHotspotsAtypeDescription</description>
  <abbreviation>ah</abbreviation>
  <alias>advanced-hotspots</alias>
  <int:schemaVersion>1</int:schemaVersion>
  <int:contentVersion>1</int:contentVersion>
  <property name="helpId">configs.analysis_type-adv_hotspots_f1176</property>
 </internal>
 <prerequisites>
  <rule>
   <ruleExpr>$PMU == core2</ruleExpr>
   <ruleExpr>$PMU == core2p</ruleExpr>
   <ruleExpr>$PMU == corei7</ruleExpr>
   <ruleExpr>$PMU == corei7wsp</ruleExpr>
   <ruleExpr>$PMU == corei7wdp</ruleExpr>
   <ruleExpr>$PMU == corei7b</ruleExpr>
   <ruleExpr>$PMU == snb</ruleExpr>
   <ruleExpr>$PMU == snbep</ruleExpr>
   <ruleExpr>$PMU == ivytown</ruleExpr>
   <ruleExpr>$PMU == ivybridge</ruleExpr>
   <ruleExpr>$PMU == haswell</ruleExpr>
   <ruleExpr>$PMU == crystalwell</ruleExpr>
   <ruleExpr>$PMU == atom</ruleExpr>
   <ruleExpr>$PMU == silvermont</ruleExpr>
   <ruleExpr>$PMU == haswell_server</ruleExpr>
   <ruleExpr>$PMU == knc</ruleExpr>
   <ruleExpr>$PMU == airmont</ruleExpr>
   <ruleExpr>$PMU == broadwell</ruleExpr>
   <ruleExpr>$PMU == skylake</ruleExpr>
   <else>
    <error>%ThisAnalysisTypeIsNotApplicable</error>
   </else>
  </rule>
 </prerequisites>
 <knobs xsl:version="1.0" exsl:keep_exsl_namespace="">
  <doubleKnob id="samplingInterval" displayName="%SamplingInterval" cliName="sampling-interval" boolean:visible="true">
   <description>%SamplingIntervalDescription</description>
   <double:min>0.01</double:min>
   <double:max>1000</double:max>
   <double:defaultValue>1</double:defaultValue>
  </doubleKnob>
  <groupKnob id="groupForCustomControl">
   <knobProperty name="knob_control_id">RadioButtonGroup</knobProperty>
   <knobs>
    <enumKnob id="collectionDetailLevel" displayName="%CollectionDetailLevel" cliName="collection-detail" boolean:visible="true">
     <description>%CollectionDetailLevelDescription</description>
     <values>
      <value displayName="%LightweightSampling" cliName="hotspots-sampling">hotspots-sampling</value>
      <value displayName="%StackSampling" cliName="stack-sampling">stack-sampling</value>
      <xsl:if test="not (exsl:ctx('connectionType') = 'mic' or exsl:ctx('connectionType') = 'mic-offload')">
       <value displayName="%StackSamplingWithCallCount" cliName="stack-and-callcount">stack-and-callcount</value>
       <value displayName="%StackSamplingWithCallAndTripCount" cliName="stack-call-and-tripcount">stack-call-and-tripcount</value>
      </xsl:if>
      <defaultValue>hotspots-sampling</defaultValue>
     </values>
    </enumKnob>
   </knobs>
  </groupKnob>
  <enumKnob id="eventCollectionMode" displayName="%EventMode" boolean:visible="true" cliName="event-mode">
   <description>%EventModeDescription</description>
   <values>
    <value displayName="%EventModeAll">all</value>
    <value displayName="%EventModeUser">user</value>
    <value displayName="%EventModeOs">os</value>
    <defaultValue>all</defaultValue>
   </values>
  </enumKnob>
  <booleanKnob id="userTasksCollection" displayName="%UserTasksCollection" boolean:visible="true" cliName="enable-user-tasks">
   <description>%UserTasksCollectionDescription</description>
   <boolean:defaultValue>false</boolean:defaultValue>
  </booleanKnob>
  <booleanKnob id="gpuDXCollectionDeprecated" displayName="%GpuDXCollection" boolean:visible="false" cliName="gpu-dx-mode">
   <description>%GpuDXCollectionDescription</description>
   <boolean:defaultValue>false</boolean:defaultValue>
  </booleanKnob>
  <booleanKnob id="anlyzeFPU" displayName="%analyzeFPU" boolean:visible="false" cliName="analyze-fpu">
   <xsl:if test="exsl:is_experimental('fpu-analysis')">
    <xsl:attribute name="boolean:visible">true</xsl:attribute>
   </xsl:if>
   <description>%anlyzeFPUDescription</description>
   <boolean:defaultValue>false</boolean:defaultValue>
  </booleanKnob>
  <xsl:choose>
   <xsl:when test="$OS='Windows'">
    <booleanKnob id="gpuUsageCollection" displayName="%GpuDXCollection" boolean:visible="true" cliName="enable-gpu-usage">
     <description>%GpuDXCollectionDescription</description>
     <boolean:defaultValue>false</boolean:defaultValue>
    </booleanKnob>
   </xsl:when>
   <xsl:otherwise>
    <booleanKnob id="gpuUsageCollection" displayName="%IGFXFtraceEventsCollection" boolean:visible="false" cliName="enable-gpu-usage">
     <description>%IGFXFtraceEventsCollectionDescription</description>
     <boolean:defaultValue>false</boolean:defaultValue>
    </booleanKnob>
   </xsl:otherwise>
  </xsl:choose>
  <xsl:if test="exsl:ctx('OS')='Android' or exsl:ctx('OS')='Linux'">
   <rule>
    <booleanKnob idToOverwrite="gpuUsageCollection" boolean:visible="true"/>
   </rule>
  </xsl:if>
  <enumKnob id="gpuCountersCollection" displayName="%GpuCountersCollection" boolean:visible="false" cliName="gpu-counters-mode">
   <description>%GpuCountersCollectionDescription</description>
   <values>
    <value displayName="%None">none</value>
    <value displayName="%GpuOverview">overview</value>
    <value displayName="%GpuComputeBasic">global-local-accesses</value>
    <xsl:if test="exsl:ctx('PlatformIndex', 0)=6">
     <value displayName="%GpuComputeExtended">compute-extended</value>
    </xsl:if>
    <xsl:if test="exsl:is_experimental('gpu-metrics2')">
     <value displayName="%GpuPreset3">preset3</value>
     <value displayName="%GpuPreset4">preset4</value>
     <value displayName="%GpuPreset5">preset5</value>
    </xsl:if>
    <defaultValue>none</defaultValue>
   </values>
  </enumKnob>
  <xsl:if test="$OS='Windows' or $OS='Android'">
   <rule>
    <enumKnob idToOverwrite="gpuCountersCollection" boolean:visible="true"/>
   </rule>
  </xsl:if>
  <intKnob id="gpuSamplingInterval" displayName="%GpuSamplingInterval" boolean:visible="false" cliName="gpu-sampling-interval">
   <description>%GpuSamplingIntervalDescription</description>
   <int:min>10</int:min>
   <int:max>10000</int:max>
   <int:defaultValue>1000</int:defaultValue>
  </intKnob>
  <booleanKnob id="gpuOpenCLCollection" displayName="%GpuOpenCLCollection" cliName="enable-gpu-runtimes">
   <xsl:attribute name="boolean:visible">
    <xsl:value-of select="exsl:ctx('OS')='Windows' or exsl:ctx('OS')='Linux'"/>
   </xsl:attribute>
   <description>%GpuOpenCLCollectionDescription</description>
   <boolean:defaultValue>false</boolean:defaultValue>
  </booleanKnob>
  <stringKnob id="initialViewpoint" displayName="%InitialViewpoint" boolean:visible="false">
   <defaultValue>%LightweightHotspotsViewpointName</defaultValue>
  </stringKnob>
 </knobs>
 <analysis xsl:version="1.0" exsl:keep_exsl_namespace="">
  <xsl:variable name="commonEventsConfig">
   <params samplingInterval="{$samplingInterval}"/>
  </xsl:variable>
  <xsl:variable name="commonEventsConfigFileName">
   <xsl:text>config://analysis_type/include/common_events.xsl?</xsl:text>
   <xsl:for-each select="exsl:node-set($commonEventsConfig)//@*">
    <xsl:value-of select="concat(name(), '=', .)"/>
    <xsl:text>&amp;</xsl:text>
   </xsl:for-each>
  </xsl:variable>
  <xsl:variable name="MainEvents" select="document($commonEventsConfigFileName)/cpi/text()"/>
  <xsl:variable name="FPUEvents">
   <xsl:if test="exsl:ctx('anlyzeFPU')">
    <xsl:choose>
     <xsl:when test="(exsl:ctx('PMU') = 'ivybridge') or (exsl:ctx('PMU') = 'ivytown')">
      <xsl:value-of select="exsl:ctx('PMUConfig')"/>
      <xsl:text>,FP_COMP_OPS_EXE.SSE_PACKED_DOUBLE:,FP_COMP_OPS_EXE.SSE_PACKED_SINGLE:,SIMD_FP_256.PACKED_SINGLE:,SIMD_FP_256.PACKED_DOUBLE:,FP_COMP_OPS_EXE.SSE_SCALAR_SINGLE:,FP_COMP_OPS_EXE.SSE_SCALAR_DOUBLE:,FP_COMP_OPS_EXE.X87:</xsl:text>
     </xsl:when>
    </xsl:choose>
   </xsl:if>
  </xsl:variable>
  <xsl:if test="exsl:ctx('anlyzeFPU') and $FPUEvents = ''">
   <rule>
    <error>%CanNotDisplayFPUForThisProcessor</error>
   </rule>
  </xsl:if>
  <collector id="runsa">
   <collectorKnob knob="collectUserTasksMode">$userTasksCollection</collectorKnob>
   <collectorKnob knob="gpuCounters">$gpuCountersCollection</collectorKnob>
   <collectorKnob knob="gpuSamplingInterval">$gpuSamplingInterval</collectorKnob>
   <collectorKnob knob="gpuUsage">$gpuUsageCollection</collectorKnob>
   <collectorKnob knob="collectGpuOpenCl">$gpuOpenCLCollection</collectorKnob>
   <collectorKnob knob="eventMode">$eventCollectionMode</collectorKnob>
   <xsl:if test="$collectionDetailLevel='hotspots-sampling'">
    <boolean:collectorKnob knob="enableVTSSCollection">false</boolean:collectorKnob>
    <boolean:collectorKnob knob="collectCallCounts">false</boolean:collectorKnob>
    <boolean:collectorKnob knob="enableCSwitch">false</boolean:collectorKnob>
   </xsl:if>
   <xsl:if test="$collectionDetailLevel='stack-sampling'">
    <boolean:collectorKnob knob="enableVTSSCollection">true</boolean:collectorKnob>
    <boolean:collectorKnob knob="collectCallCounts">false</boolean:collectorKnob>
    <boolean:collectorKnob knob="enableCSwitch">true</boolean:collectorKnob>
   </xsl:if>
   <xsl:if test="$collectionDetailLevel='stack-and-callcount'">
    <boolean:collectorKnob knob="enableVTSSCollection">true</boolean:collectorKnob>
    <boolean:collectorKnob knob="collectCallCounts">true</boolean:collectorKnob>
    <boolean:collectorKnob knob="enableCSwitch">true</boolean:collectorKnob>
   </xsl:if>
   <xsl:if test="$collectionDetailLevel='stack-call-and-tripcount'">
    <boolean:collectorKnob knob="enableVTSSCollection">true</boolean:collectorKnob>
    <boolean:collectorKnob knob="collectCallCounts">true</boolean:collectorKnob>
    <boolean:collectorKnob knob="collectTripCounts">true</boolean:collectorKnob>
    <boolean:collectorKnob knob="enableCSwitch">true</boolean:collectorKnob>
   </xsl:if>
   <boolean:collectorKnob knob="cpuGpuUsageData">true</boolean:collectorKnob>
   <boolean:collectorKnob knob="spinOverheadTimeExpandedData">true</boolean:collectorKnob>
   <collectorKnob knob="pmuEventConfig">
    <xsl:value-of select="$MainEvents"/>
    <xsl:value-of select="$FPUEvents"/>
   </collectorKnob>
   <xsl:if test="exsl:ctx('$gpuDXCollectionDeprecated')">
    <collectorKnob knob="gpuUsage">$gpuDXCollectionDeprecated</collectorKnob>
   </xsl:if>
  </collector>
 </analysis>
</bag>
